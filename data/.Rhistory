hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
d <- as.dist(1 - abs(cor(single.met.list[[i]][, c(which(dif.list[[i]]$adj_pvalues < .075) + 6)],
method = "spearman")))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste("../analyses/",
names(single.met.list)[i], "spe_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste("../analyses/",
names(single.met.list)[i], "spe_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
}
library(gplots)
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
dev.off()
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
setwd("C:/Users/jrash/ubuntu_share/Google Drive/FourchesLab/metabolimics/significant_metabolites")
train.dif.s <- read.csv("serum/healthstate_anova_wsig_control_training_serum_nonpara.txt")
train.dif.p <- read.csv("plasma/healthstate_anova_wsig_control_training_plasma_nonpara.txt")
test.dif.s <- read.csv("serum/healthstate_anova_wsig_control_test_serum_nonpara.txt")
test.dif.p <- read.csv("plasma/healthstate_anova_wsig_control_test_plasma_nonpara.txt")
# show the p-values
train.sig.s <- train.dif.s$adj_pvalues < .075
test.sig.s <- test.dif.s$adj_pvalues < .075
train.sig.p <- train.dif.p$adj_pvalues < .075
test.sig.p <- test.dif.p$adj_pvalues < .075
train.clus.s <- train.dif.s$variables %in% c("glutamic_acid",
"aspartic_acid", "N-acetylglutamate",
"glutamine", "asparagine", "cystine")
sum(train.clus.s)
table(train.sig.s, train.clus.s)
p.values.fish <- vector(length = 4)
names(p.values.fish) <- c("train.s", "test.s", "train.p", "test.p")
p.values.fish[1] <- fisher.test(train.sig.s, train.clus.s, alternative = "greater")$p.value
test.clus.s <- test.dif.s$variables %in% c("glutamic_acid",
"aspartic_acid", "N-acetylglutamate",
"glutamine", "asparagine", "cystine")
sum(test.clus.s)
table(test.sig.s, test.clus.s)
p.values.fish[2] <- fisher.test(test.sig.s, test.clus.s, alternative = "greater")$p.value
train.clus.p <- train.dif.p$variables %in% c("glutamic_acid",
"aspartic_acid", "N-acetylglutamate",
"glutamine", "asparagine", "cystine")
sum(train.clus.p)
table(train.sig.p, train.clus.p)
p.values.fish[3] <- fisher.test(train.sig.p, train.clus.p, alternative = "greater")$p.value
test.clus.p <- test.dif.p$variables %in% c("glutamic_acid",
"aspartic_acid", "N-acetylglutamate",
"glutamine", "asparagine", "cystine")
sum(test.clus.p)
table(test.sig.p, test.clus.p)
p.values.fish[4] <- fisher.test(test.sig.p, test.clus.p, alternative = "greater")$p.value
p.adjust(p.values.fish, method = "BH") < .05
p.adjust(p.values.fish, method = "BH") < .01
p.adjust(p.values.fish, method = "BH") < .001
clus.idx <- train.dif.s$variables %in% c("glutamic_acid",
"aspartic_acid", "N-acetylglutamate",
"glutamine", "asparagine", "cystine")
train.dif.s[clus.idx, ][5, ]
test.dif.s[clus.idx, ][5, ]
train.dif.p[clus.idx, ][5, ]
test.dif.p[clus.idx, ][5, ]
#------------Pathway analysis enrichment
p.values.fish <- vector(length = 8)
#----Serum
# Alanine, aspartate and glutamate metabolism
num.in.path <- c(9, 4, 6, 5, 4, 7, 7, 12)
num.in.clus <- c(4, 2, 0, 0, 2, 1, 2, 5)
for (i in 1:8) {
path.mem <- rep(0, 130)
path.mem[1:num.in.path[i]] <- rep(1, num.in.path[i])
clus.mem <- rep(0, 130)
if (num.in.clus[i] != 0) {
clus.mem[1:num.in.clus[i]] <- rep(1, num.in.clus[i])
p.values.fish[i] <- fisher.test(path.mem, clus.mem, alternative = "greater")$p.value
} else {
p.values.fish[i] <- 1
}
}
p.adjust(p.values.fish, method = "BH") < .05
p.adjust(p.values.fish, method = "BH") < .01
p.adjust(p.values.fish, method = "BH") < .001
hclust.average <- function(x) hclust(x, method="average")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
hclust.average <- function(x) hclust(x, method="average")
palette <- colorRampPalette(c("blue","yellow"))(n=300)
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
library(psych)
library(parcor)
library(fpc)
library(gplots)
# You will need to replace with the path to the data directory on your machine
setwd("G:/My Drive/FourchesLab/github/Fourches_Lab/metabochem/data/")
train.dif.s <- read.csv("healthstate_anova_wsig_control_training_serum_nonpara.txt")
train.dif.p <- read.csv("healthstate_anova_wsig_control_training_plasma_nonpara.txt")
load("training_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Training", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum <- d_serum
health_df_plasma <- d_plasma
test.dif.s <- read.csv("healthstate_anova_wsig_control_test_serum_nonpara.txt")
test.dif.p <- read.csv("healthstate_anova_wsig_control_test_plasma_nonpara.txt")
load("test_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Test", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum.test <- d_serum
health_df_plasma.test <- d_plasma
# cluster based on spearmen and partial correlations-------------
single.met.list <- list(health_df_serum, health_df_serum.test,
health_df_plasma, health_df_plasma.test)
head(single.met.list[[4]])
# regress intensity values on the covariates
for(i in seq_along(single.met.list)) {
for(j in 7:ncol(single.met.list[[i]])) {
lm.fit <- lm(single.met.list[[i]][, j] ~ Smoking_Status + Gender, data = single.met.list[[i]])
single.met.list[[i]][, j] <- lm.fit$residuals
}
}
names(single.met.list) <- c("serum_training", "serum_test",
"plasma_training", "plasma_test")
dif.list <- list(train.dif.s, train.dif.s, train.dif.p, train.dif.p)
hclust.average <- function(x) hclust(x, method="average")
palette <- colorRampPalette(c("blue","yellow"))(n=300)
for (i in seq_along(single.met.list)) {
x <- single.met.list[[i]][, -seq(1, 6)]
partial.cor <- pls.net(as.matrix(x), ncomp = 30)
partial.cor <- partial.cor$pcor
partial.cor <- partial.cor[c(which(dif.list[[i]]$adj_pvalues < .075)),
c(which(dif.list[[i]]$adj_pvalues < .075))]
colnames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
rownames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
d <- as.dist(1 - abs(partial.cor))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
d <- as.dist(1 - abs(cor(single.met.list[[i]][, c(which(dif.list[[i]]$adj_pvalues < .075) + 6)],
method = "spearman")))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
}
library(psych)
library(parcor)
library(fpc)
library(gplots)
# You will need to replace with the path to the data directory on your machine
setwd("G:/My Drive/FourchesLab/github/Fourches_Lab/metabochem/data/")
train.dif.s <- read.csv("healthstate_anova_wsig_control_training_serum_nonpara.txt")
train.dif.p <- read.csv("healthstate_anova_wsig_control_training_plasma_nonpara.txt")
load("training_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Training", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum <- d_serum
health_df_plasma <- d_plasma
test.dif.s <- read.csv("healthstate_anova_wsig_control_test_serum_nonpara.txt")
test.dif.p <- read.csv("healthstate_anova_wsig_control_test_plasma_nonpara.txt")
load("test_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Test", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum.test <- d_serum
health_df_plasma.test <- d_plasma
# cluster based on spearmen and partial correlations-------------
single.met.list <- list(health_df_serum, health_df_serum.test,
health_df_plasma, health_df_plasma.test)
head(single.met.list[[4]])
# regress intensity values on the covariates
for(i in seq_along(single.met.list)) {
for(j in 7:ncol(single.met.list[[i]])) {
lm.fit <- lm(single.met.list[[i]][, j] ~ Smoking_Status + Gender, data = single.met.list[[i]])
single.met.list[[i]][, j] <- lm.fit$residuals
}
}
names(single.met.list) <- c("serum_training", "serum_test",
"plasma_training", "plasma_test")
dif.list <- list(train.dif.s, train.dif.s, train.dif.p, train.dif.p)
hclust.average <- function(x) hclust(x, method="average")
palette <- colorRampPalette(c("blue","yellow"))(n=300)
for (i in 1:3) {
x <- single.met.list[[i]][, -seq(1, 6)]
partial.cor <- pls.net(as.matrix(x), ncomp = 30)
partial.cor <- partial.cor$pcor
partial.cor <- partial.cor[c(which(dif.list[[i]]$adj_pvalues < .075)),
c(which(dif.list[[i]]$adj_pvalues < .075))]
colnames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
rownames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
d <- as.dist(1 - abs(partial.cor))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
d <- as.dist(1 - abs(cor(single.met.list[[i]][, c(which(dif.list[[i]]$adj_pvalues < .075) + 6)],
method = "spearman")))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
}
library(psych)
library(parcor)
library(fpc)
library(gplots)
# You will need to replace with the path to the data directory on your machine
setwd("G:/My Drive/FourchesLab/github/Fourches_Lab/metabochem/data/")
train.dif.s <- read.csv("healthstate_anova_wsig_control_training_serum_nonpara.txt")
train.dif.p <- read.csv("healthstate_anova_wsig_control_training_plasma_nonpara.txt")
load("training_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Training", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum <- d_serum
health_df_plasma <- d_plasma
test.dif.s <- read.csv("healthstate_anova_wsig_control_test_serum_nonpara.txt")
test.dif.p <- read.csv("healthstate_anova_wsig_control_test_plasma_nonpara.txt")
load("test_set_tq_nonormalize.rda")
d$Set <- paste00(rep("Test", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum.test <- d_serum
health_df_plasma.test <- d_plasma
# cluster based on spearmen and partial correlations-------------
single.met.list <- list(health_df_serum, health_df_serum.test,
health_df_plasma, health_df_plasma.test)
head(single.met.list[[4]])
# regress intensity values on the covariates
for(i in seq_along(single.met.list)) {
for(j in 7:ncol(single.met.list[[i]])) {
lm.fit <- lm(single.met.list[[i]][, j] ~ Smoking_Status + Gender, data = single.met.list[[i]])
single.met.list[[i]][, j] <- lm.fit$residuals
}
}
names(single.met.list) <- c("serum_training", "serum_test",
"plasma_training", "plasma_test")
dif.list <- list(train.dif.s, train.dif.s, train.dif.p, train.dif.p)
hclust.average <- function(x) hclust(x, method="average")
palette <- colorRampPalette(c("blue","yellow"))(n=300)
for (i in 1:3) {
x <- single.met.list[[i]][, -seq(1, 6)]
partial.cor <- pls.net(as.matrix(x), ncomp = 30)
partial.cor <- partial.cor$pcor
partial.cor <- partial.cor[c(which(dif.list[[i]]$adj_pvalues < .075)),
c(which(dif.list[[i]]$adj_pvalues < .075))]
colnames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
rownames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
d <- as.dist(1 - abs(partial.cor))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
d <- as.dist(1 - abs(cor(single.met.list[[i]][, c(which(dif.list[[i]]$adj_pvalues < .075) + 6)],
method = "spearman")))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
}
which(dif.list[[i]]$adj_pvalues < .075)
colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
which(dif.list[[i]]$adj_pvalues < .075)
i
colnames(single.met.list[[i]])
colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075)]
colnames(single.met.list[[i]])
which(dif.list[[i]]$adj_pvalues < .075)
library(psych)
library(parcor)
library(fpc)
library(gplots)
# You will need to replace with the path to the data directory on your machine
setwd("G:/My Drive/FourchesLab/github/Fourches_Lab/metabochem/data/")
train.dif.s <- read.csv("healthstate_anova_wsig_control_training_serum_nonpara.txt")
train.dif.p <- read.csv("healthstate_anova_wsig_control_training_plasma_nonpara.txt")
load("training_set_tq_nonormalize.rda")
d$Set <- paste0(rep("Training", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum <- d_serum
health_df_plasma <- d_plasma
test.dif.s <- read.csv("healthstate_anova_wsig_control_test_serum_nonpara.txt")
test.dif.p <- read.csv("healthstate_anova_wsig_control_test_plasma_nonpara.txt")
load("test_set_tq_nonormalize.rda")
d$Set <- paste0(rep("Test", nrow(d)), d$Health_State)
d <- d[, c(1:5, 136, 6:135)]
d_serum <- d[d$Organ == "Serum", ]
d_plasma <- d[d$Organ == "Plasma", ]
health_df_serum.test <- d_serum
health_df_plasma.test <- d_plasma
# cluster based on spearmen and partial correlations-------------
single.met.list <- list(health_df_serum, health_df_serum.test,
health_df_plasma, health_df_plasma.test)
head(single.met.list[[4]])
# regress intensity values on the covariates
for(i in seq_along(single.met.list)) {
for(j in 7:ncol(single.met.list[[i]])) {
lm.fit <- lm(single.met.list[[i]][, j] ~ Smoking_Status + Gender, data = single.met.list[[i]])
single.met.list[[i]][, j] <- lm.fit$residuals
}
}
names(single.met.list) <- c("serum_training", "serum_test",
"plasma_training", "plasma_test")
dif.list <- list(train.dif.s, train.dif.s, train.dif.p, train.dif.p)
hclust.average <- function(x) hclust(x, method="average")
palette <- colorRampPalette(c("blue","yellow"))(n=300)
for (i in 1:3) {
x <- single.met.list[[i]][, -seq(1, 6)]
partial.cor <- pls.net(as.matrix(x), ncomp = 30)
partial.cor <- partial.cor$pcor
partial.cor <- partial.cor[c(which(dif.list[[i]]$adj_pvalues < .075)),
c(which(dif.list[[i]]$adj_pvalues < .075))]
colnames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
rownames(partial.cor) <- colnames(single.met.list[[i]])[which(dif.list[[i]]$adj_pvalues < .075) + 6]
d <- as.dist(1 - abs(partial.cor))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
plot(hclust(d, method ="average"), main="Average Linkage with Correlation-Based Distance", xlab="", sub ="")
tiff(paste0("../analyses/",
names(single.met.list)[i], "par_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
d <- as.dist(1 - abs(cor(single.met.list[[i]][, c(which(dif.list[[i]]$adj_pvalues < .075) + 6)],
method = "spearman")))
ks <- seq(2, nrow(as.matrix(d)) - 1, by = 1)
hc <- hclust(d, method = "average")
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, cutree(hc,k))$avg.silwidth
})
nClus <- ks[which.max(ASW)]
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_asw.tiff"), res = 300,
width = 7, height = 7, units = "in")
plot(y=ASW, x=ks, type="l", ylab="Average Silhouette Width", xlab="Number of Clusters",
xaxt = "n")
axis(side = 1, at = ks)
dev.off()
tiff(paste0("../analyses/",
names(single.met.list)[i], "spe_cor.tiff"),
res = 300, width = 7, height = 7, units = "in")
heatmap.2(data.matrix(d), trace="none", density.info="none", col=palette, mar=c(10,10),cexCol=1, cexRow=1,
Rowv = T, Colv=T, keysize = 1,hclustfun = hclust.average)
dev.off()
}
